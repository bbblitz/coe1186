import java.awt.*;
import java.awt.event.*;
import java.io.*;
import javax.swing.*;

public class BareBones extends JFrame implements ActionListener
{
	private JPanel innerPanel = new JPanel(new BorderLayout());
	private JTextArea textArea = new JTextArea();
	private JScrollPane scrollPane = new JScrollPane();
	private boolean showExecutionPanel = false;
	private boolean showVariablesPanel = false;
	private JLabel statusBar = new JLabel("Ready");
	private ExecutionPanel executionPanel = new ExecutionPanel(this);
	private VariablesPanel variablesPanel = new VariablesPanel(this);
	private Interpreter interpreter = new Interpreter();
	private File currentFile = null;

	/**
	 * Constructs a new BareBones object.
	 */
	public BareBones()
	{
		// If the application is not running as an applet...
		if (!BareBonesApplet.isApplet)
		{
			// ...tell the JVM to die when we close the frame
			setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		}

		// Set up the main window
		setTitle("Bare Bones IDE");
		setSize(800, 600);
		setLayout(new BorderLayout());

		// Set up the menu bar
		JMenuBar menuBar = new JMenuBar();
		JMenu menu;
		JMenuItem menuItem;

		// Create File menu
		menu = new JMenu("File");
		menuBar.add(menu);
		menuItem = new JMenuItem("New");
		menuItem.addActionListener(this);
		menu.add(menuItem);
		menuItem = new JMenuItem("Open...");
		menuItem.addActionListener(this);
		menu.add(menuItem);
		menuItem = new JMenuItem("Save");
		menuItem.addActionListener(this);
		menu.add(menuItem);
		menuItem = new JMenuItem("Save As...");
		menuItem.addActionListener(this);
		menu.add(menuItem);
		menu.addSeparator();
		menuItem = new JMenuItem("Exit");
		menuItem.addActionListener(this);
		menu.add(menuItem);

		// Create Edit menu
		menu = new JMenu("Edit");
		menuBar.add(menu);
		menuItem = new JMenuItem("Cut");
		menuItem.addActionListener(this);
		menu.add(menuItem);
		menuItem = new JMenuItem("Copy");
		menuItem.addActionListener(this);
		menu.add(menuItem);
		menuItem = new JMenuItem("Paste");
		menuItem.addActionListener(this);
		menu.add(menuItem);

		// Create View menu
		menu = new JMenu("View");
		menuBar.add(menu);
		menuItem = new JMenuItem("Execution Panel");
		menuItem.addActionListener(this);
		menu.add(menuItem);
		menuItem = new JMenuItem("Variables Panel");
		menuItem.addActionListener(this);
		menu.add(menuItem);

		// Add the menu bar to the window
		setJMenuBar(menuBar);

		// Component set up
		statusBar.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLoweredBevelBorder(), BorderFactory.createEmptyBorder(2, 2, 2, 2)));
		textArea.setFont(new Font("Courier New", Font.PLAIN, 13));

		// Add components to window
		scrollPane.getViewport().add(textArea);
		innerPanel.add(scrollPane, BorderLayout.CENTER);
		add(innerPanel, BorderLayout.CENTER);
		add(statusBar, BorderLayout.SOUTH);

		// Show execution panel
		menuViewExecutionPanel(null);

		// Set up interpreter
		interpreter.addDebugger(executionPanel);
		interpreter.addDebugger(variablesPanel);

		// Make the window visible
		setVisible(true);
	}

	/**
	 * Executes the Bare Bones program.
	 */
	public void executeProgram()
	{
		// Store this for use inside thread
		final BareBones me = this;

		// Set up the thread
		Thread executeThread = new Thread()
		{
			public void run()
			{
				try
				{
					me.statusBar.setForeground(Color.BLACK);
					me.statusBar.setText("Executing...");
					me.interpreter.setDelayTime(me.executionPanel.getSlowdown());
					me.interpreter.execute(me.textArea.getText());
					me.statusBar.setText("Execution finished");
				}
				catch (InterpreterException e)
				{
					me.statusBar.setForeground(Color.RED);
					me.statusBar.setText("Error: " + e.getMessage());
				}
			}
		};

		// Start the thread
		executeThread.start();
	}

	/**
	 * Saves the contents of the text area to a file.
	 * @param file The file to save to.
	 */
	public void saveFile(File file)
	{
		try
		{
			BufferedWriter writer = new BufferedWriter(new FileWriter(file));
			writer.write(textArea.getText(), 0, textArea.getText().length());
			writer.flush();
			currentFile = file;
		}
		catch (Exception e)
		{
		}
	}

	/**
	 * Handles the action events generated by clicking on the menu. Implementing
	 * ActionListener on this class seemed neater than having 11 anonymous
	 * classes inside the constructor.
	 */
	public void actionPerformed(ActionEvent e)
	{
		JMenuItem menuItem = (JMenuItem)e.getSource();

		if (menuItem.getText().equals("New"))
		{
			menuFileNew(e);
		}
		else if (menuItem.getText().equals("Open..."))
		{
			menuFileOpen(e);
		}
		else if (menuItem.getText().equals("Save"))
		{
			menuFileSave(e);
		}
		else if (menuItem.getText().equals("Save As..."))
		{
			menuFileSaveAs(e);
		}
		else if (menuItem.getText().equals("Exit"))
		{
			menuFileExit(e);
		}
		else if (menuItem.getText().equals("Cut"))
		{
			menuEditCut(e);
		}
		else if (menuItem.getText().equals("Copy"))
		{
			menuEditCopy(e);
		}
		else if (menuItem.getText().equals("Paste"))
		{
			menuEditPaste(e);
		}
		else if (menuItem.getText().equals("Execution Panel"))
		{
			menuViewExecutionPanel(e);
		}
		else if (menuItem.getText().equals("Variables Panel"))
		{
			menuViewVariablesPanel(e);
		}
		else
		{
			System.out.println("WTF!? " + menuItem.getText());
		}
	}

	/**
	 * Handles File -> New menu events.
	 */
	public void menuFileNew(ActionEvent e)
	{
		Object[] options = { "Yes", "No", "Cancel" };
		int choice = JOptionPane.showOptionDialog(this, "Do you wish to save the current file?", "Bare Bones IDE", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);

		if (choice == 0)		// Yes
		{
			menuFileSave(e);
			textArea.setText("");
			currentFile = null;
		}
		else if (choice == 1)	// No
		{
			textArea.setText("");
			currentFile = null;
		}
	}

	/**
	 * Handles File -> Open menu events.
	 */
	public void menuFileOpen(ActionEvent e)
	{
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);

		// Display file chooser, and if the user clicks OK...
		if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
		{
			// Prompt user to save
			Object[] options = { "Yes", "No", "Cancel" };
			int choice = JOptionPane.showOptionDialog(this, "Do you wish to save the current file?", "Bare Bones IDE", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);

			if (choice == 0)		// Yes
			{
				menuFileSave(e);
			}
			else if (choice == 2)	// Cancel
			{
				return;
			}

			try
			{
				// Open the file
				File file = fileChooser.getSelectedFile();
				BufferedReader reader = new BufferedReader(new FileReader(file));

				// Create an array to read the file in to and read the file
				char[] fileChars = new char[(int)file.length()];
				reader.read(fileChars, 0, (int)file.length());
				String fileString = new String(fileChars);
				textArea.setText(fileString);

				// Store current file
				currentFile = file;
			}
			catch (Exception exception)
			{
			}
		}
	}

	/**
	 * Handles File -> Save menu events.
	 */
	public void menuFileSave(ActionEvent e)
	{
		// If we don't have a current file, we need user input, so go to the
		// Save As code instead.
		if (currentFile == null)
		{
			menuFileSaveAs(e);
		}
		else
		{
			saveFile(currentFile);
		}
	}

	/**
	 * Handles File -> Save As menu events.
	 */
	public void menuFileSaveAs(ActionEvent e)
	{
		JFileChooser fileChooser = new JFileChooser();

		// Display file chooser, and if the user clicks OK...
		if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
		{
			saveFile(fileChooser.getSelectedFile());
		}
	}

	/**
	 * Handles File -> Exit menu events.
	 */
	public void menuFileExit(ActionEvent e)
	{
		if (BareBonesApplet.isApplet)
		{
			setVisible(false);
		}
		else
		{
			System.exit(0);
		}
	}

	/**
	 * Handles Edit -> Cut menu events.
	 */
	public void menuEditCut(ActionEvent e)
	{
		textArea.cut();
	}

	/**
	 * Handles Edit -> Copy menu events.
	 */
	public void menuEditCopy(ActionEvent e)
	{
		textArea.copy();
	}

	/**
	 * Handles Edit -> Paste menu events.
	 */
	public void menuEditPaste(ActionEvent e)
	{
		textArea.paste();
	}

	/**
	 * Handles View -> Execution Panel menu events.
	 */
	public void menuViewExecutionPanel(ActionEvent e)
	{
		if (showExecutionPanel)
		{
			showExecutionPanel = false;
			innerPanel.remove(executionPanel);
		}
		else
		{
			showExecutionPanel = true;
			innerPanel.add(executionPanel, BorderLayout.EAST);
		}

		innerPanel.validate();
	}

	/**
	 * Handles View -> Variables Panel menu events.
	 */
	public void menuViewVariablesPanel(ActionEvent e)
	{
		if (showVariablesPanel)
		{
			showVariablesPanel = false;
			innerPanel.remove(variablesPanel);
		}
		else
		{
			showVariablesPanel = true;
			innerPanel.add(variablesPanel, BorderLayout.SOUTH);
		}

		innerPanel.validate();
	}

	/**
	 * Returns the Interpreter object.
	 */
	public Interpreter getInterpreter()
	{
		return interpreter;
	}

	/**
	 * Defines the entry point for the application.
	 * @param args The arguments for the application.
	 */
	public static void main(String[] args)
	{
		new BareBones();
	}
}
